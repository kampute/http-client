// Copyright (C) 2024 Kampute
//
// This file is part of the Kampute.HttpClient package and is released under the terms of the MIT license.
// See the LICENSE file in the project root for the full license text.

namespace Kampute.HttpClient
{
    using System;
    using System.Collections.Generic;
#if NETSTANDARD2_1_OR_GREATER
    using System.Diagnostics.CodeAnalysis;
#endif

    /// <summary>
    /// Provides extension methods for dictionaries to simplify accessing and manipulating their entries.
    /// </summary>
    public static class DictionaryExtensions
    {
        /// <summary>
        /// Attempts to retrieve the value associated with the specified key from the dictionary and cast it to the type <typeparamref name="T"/>.
        /// </summary>
        /// <typeparam name="T">The type to which the value should be cast.</typeparam>
        /// <param name="dictionary">The dictionary to search.</param>
        /// <param name="key">The key of the value to retrieve.</param>
        /// <param name="value">
        /// When this method returns, contains the value associated with the specified key if the operation is successful and the value is of type <typeparamref name="T"/>; otherwise, 
        /// the default value for <typeparamref name="T"/>. This parameter is passed uninitialized.
        /// </param>
        /// <returns><c>true</c> if the dictionary contains an element with the specified key and the value is of type <typeparamref name="T"/>; otherwise, <c>false</c>.</returns>
        /// <exception cref="ArgumentNullException">Thrown if <paramref name="key"/> is <c>null</c>.</exception>
        public static bool TryGetValue<T>(
            this IDictionary<string, object?> dictionary,
            string key,
#if NETSTANDARD2_1_OR_GREATER
            [NotNullWhen(true)]
#endif
            out T? value
        )
        {
            if (key is null)
                throw new ArgumentNullException(nameof(key));

            if (dictionary.TryGetValue(key, out var v) && v is T typedValue)
            {
                value = typedValue;
                return true;
            }

            value = default;
            return false;
        }

        /// <summary>
        /// Retrieves the value associated with a specified key and of type <typeparamref name="T"/> from the dictionary. If the key does not exist or its value is not of
        /// type <typeparamref name="T"/>, it adds or replaces the key/value pair with a new value generated by the provided delegate.
        /// </summary>
        /// <typeparam name="T">The type of the value to add or update in the dictionary.</typeparam>
        /// <param name="dictionary">The dictionary to add or update the key/value pair in.</param>
        /// <param name="key">The key of the element to add or update.</param>
        /// <param name="valueFactory">The delegate used to generate a value for the key.</param>
        /// <returns>
        /// The value associated with the specified key. The existing value for the key if the key is found in the dictionary and is of type <typeparamref name="T"/>;
        /// otherwise, a new value generated by the <paramref name="valueFactory"/> delegate.
        /// </returns>
        /// <exception cref="ArgumentNullException">Thrown if either <paramref name="key"/> or <paramref name="valueFactory"/> is <c>null</c>.</exception>
        public static T GetOrAdd<T>(this IDictionary<string, object?> dictionary, string key, Func<string, T> valueFactory) where T : notnull
        {
            if (key is null)
                throw new ArgumentNullException(nameof(key));
            if (valueFactory is null)
                throw new ArgumentNullException(nameof(valueFactory));

            if (dictionary.TryGetValue(key, out var v) && v is T value)
                return value;

            value = valueFactory(key);
            dictionary[key] = value;
            return value;
        }
    }
}
